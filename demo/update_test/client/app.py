"""
Âú®Á∫øÊõ¥Êñ∞ÊµãËØïÈ°πÁõÆ - ÂÆ¢Êà∑Á´Ø‰∏ªÂ∫îÁî® (PyInstallerÁâàÊú¨)
Âü∫‰∫é PyQt5 ÂÆûÁé∞ÔºåÊîØÊåÅexeÊñá‰ª∂ÁöÑÂú®Á∫øÊõ¥Êñ∞
"""

import sys
import os
import time
import json
import subprocess
from pathlib import Path

# PyQt5 imports - ‰∏éÊÇ®ÁöÑÈ°πÁõÆ‰øùÊåÅ‰∏ÄËá¥
from PyQt5.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QHBoxLayout, QLabel, 
    QPushButton, QTextEdit, QDialog, QFrame, QMessageBox, QProgressBar
)
from PyQt5.QtCore import Qt, QTimer, QThread, pyqtSignal
from PyQt5.QtGui import QFont, QPixmap, QIcon

# Â∞ùËØïÂØºÂÖ• qfluentwidgetsÔºàÂèØÈÄâÔºå‰∏éÊÇ®ÁöÑÈ°πÁõÆ‰øùÊåÅ‰∏ÄËá¥Ôºâ
try:
    from qfluentwidgets import (
        PrimaryPushButton as FluentPrimaryButton,
        PushButton as FluentButton,
        Theme, setTheme
    )
    FLUENT_AVAILABLE = True
except ImportError:
    FluentPrimaryButton = QPushButton
    FluentButton = QPushButton
    def setTheme(*args, **kwargs):
        pass
    FLUENT_AVAILABLE = False

# ÂØºÂÖ•Êú¨Âú∞Ê®°Âùó
from manipulate.api_client import APIClient
# from manipulate.update_manager import UpdateManager  # PyInstallerÊ®°ÂºèÊöÇÊó∂‰∏çÁî®


class UpdateCheckThread(QThread):
    """Êõ¥Êñ∞Ê£ÄÊü•Á∫øÁ®ã"""
    update_found = pyqtSignal(dict)
    check_completed = pyqtSignal(bool, str)
    
    def __init__(self, api_client, current_version):
        super().__init__()
        self.api_client = api_client
        self.current_version = current_version
    
    def run(self):
        """ÊâßË°åÊõ¥Êñ∞Ê£ÄÊü•"""
        try:
            success, data = self.api_client.check_version(self.current_version)
            
            if success and isinstance(data, dict):
                if data.get("update_available", False):
                    self.update_found.emit(data)
                    self.check_completed.emit(True, "ÂèëÁé∞Êñ∞ÁâàÊú¨")
                else:
                    self.check_completed.emit(True, "ÊÇ®Â∑≤ÁªèÊòØÊúÄÊñ∞ÁâàÊú¨")
            else:
                error_msg = data.get("error", "Ê£ÄÊü•Êõ¥Êñ∞Â§±Ë¥•") if isinstance(data, dict) else "Ê£ÄÊü•Êõ¥Êñ∞Â§±Ë¥•"
                self.check_completed.emit(False, error_msg)
                
        except Exception as e:
            self.check_completed.emit(False, f"Ê£ÄÊü•Êõ¥Êñ∞ÂºÇÂ∏∏: {str(e)}")


class SimpleTestApp(QWidget):
    """ÁÆÄÂçïÁöÑÊµãËØïÂ∫îÁî®"""
    
    def __init__(self):
        super().__init__()
        self.current_version = self.load_current_version()
        self.counter = 0
        self.api_client = None
        self.update_manager = None
        self.update_check_thread = None
        
        self.init_api_client()
        self.init_ui()
        self.init_update_manager()
        
        # ÂêØÂä®Êó∂Ëá™Âä®Ê£ÄÊü•Êõ¥Êñ∞ÔºàÂª∂Ëøü3ÁßíÔºâ
        QTimer.singleShot(3000, self.auto_check_update)
    
    def load_current_version(self):
        """Âä†ËΩΩÂΩìÂâçÁâàÊú¨Âè∑"""
        version_file = Path(__file__).parent / "version.txt"
        try:
            if version_file.exists():
                with open(version_file, 'r', encoding='utf-8') as f:
                    return f.read().strip()
            else:
                # ÈªòËÆ§ÁâàÊú¨
                return "1.0.0"
        except Exception:
            return "1.0.0"
    
    def init_api_client(self):
        """ÂàùÂßãÂåñAPIÂÆ¢Êà∑Á´Ø"""
        # Âä†ËΩΩÈÖçÁΩÆ
        config_file = Path(__file__).parent / "config" / "update_config.json"
        try:
            with open(config_file, 'r', encoding='utf-8') as f:
                config = json.load(f)
                base_url = config["update_server"]["base_url"]
        except Exception:
            base_url = "http://127.0.0.1:8000"
        
        self.api_client = APIClient(base_url, log_callback=self.log_message)
    
    def init_update_manager(self):
        """ÂàùÂßãÂåñÊõ¥Êñ∞ÁÆ°ÁêÜÂô®ÔºàPyInstallerÊ®°ÂºèÁÆÄÂåñÁâàÔºâ"""
        # PyInstallerÊ®°Âºè‰∏ãÊàë‰ª¨‰∏ç‰ΩøÁî®Â§çÊùÇÁöÑUpdateManager
        # Âè™‰øùÁïôÁÆÄÂçïÁöÑÊõ¥Êñ∞Ê£ÄÊü•ÂäüËÉΩ
        self.update_manager = None  # ÊöÇÊó∂ËÆæ‰∏∫None
        pass
    
    def init_ui(self):
        """ÂàùÂßãÂåñÁî®Êà∑ÁïåÈù¢"""
        self.setWindowTitle(f'ÊµãËØïÂ∫îÁî® v{self.current_version}')
        self.setGeometry(300, 300, 600, 500)
        
        # ËÆæÁΩÆÂ∫îÁî®ÂõæÊ†áÔºàÂ¶ÇÊûúÂ≠òÂú®Ôºâ
        try:
            icon_path = Path(__file__).parent / "public" / "logo.png"
            if icon_path.exists():
                self.setWindowIcon(QIcon(str(icon_path)))
        except Exception:
            pass
        
        # ‰∏ªÂ∏ÉÂ±Ä
        layout = QVBoxLayout()
        layout.setSpacing(15)
        layout.setContentsMargins(20, 20, 20, 20)
        
        # Ê†áÈ¢òÂå∫Âüü
        self.create_header_section(layout)
        
        # ÂäüËÉΩÂå∫Âüü
        self.create_function_section(layout)
        
        # Êõ¥Êñ∞Âå∫Âüü
        self.create_update_section(layout)
        
        # Êó•ÂøóÂå∫Âüü
        self.create_log_section(layout)
        
        self.setLayout(layout)
        
        # Â∫îÁî®Ê†∑Âºè
        self.apply_theme()
    
    def create_header_section(self, layout):
        """ÂàõÂª∫Ê†áÈ¢òÂå∫Âüü"""
        header_frame = QFrame()
        header_layout = QVBoxLayout(header_frame)
        
        # Â∫îÁî®Ê†áÈ¢ò
        title_label = QLabel("üöÄ Âú®Á∫øÊõ¥Êñ∞ÊµãËØïÂ∫îÁî®")
        title_label.setFont(QFont("Arial", 16, QFont.Bold))
        title_label.setAlignment(Qt.AlignCenter)
        
        # ÁâàÊú¨‰ø°ÊÅØ
        self.version_label = QLabel(f"ÂΩìÂâçÁâàÊú¨: v{self.current_version}")
        self.version_label.setAlignment(Qt.AlignCenter)
        self.version_label.setStyleSheet("color: #666; font-size: 12px;")
        
        header_layout.addWidget(title_label)
        header_layout.addWidget(self.version_label)
        
        layout.addWidget(header_frame)
    
    def create_function_section(self, layout):
        """ÂàõÂª∫ÂäüËÉΩÂå∫Âüü"""
        function_frame = QFrame()
        function_frame.setFrameStyle(QFrame.Box)
        function_layout = QVBoxLayout(function_frame)
        
        # ËÆ°Êï∞Âô®ÊòæÁ§∫
        self.counter_label = QLabel(f"ËÆ°Êï∞Âô®: {self.counter}")
        self.counter_label.setFont(QFont("Arial", 24, QFont.Bold))
        self.counter_label.setAlignment(Qt.AlignCenter)
        
        # ÊåâÈíÆÂå∫Âüü
        button_layout = QHBoxLayout()
        
        # +1 ÊåâÈíÆ
        if FLUENT_AVAILABLE:
            self.plus_button = FluentPrimaryButton("+1")
        else:
            self.plus_button = QPushButton("+1")
        self.plus_button.clicked.connect(self.increment_counter)
        
        # -1 ÊåâÈíÆÔºàv1.1.0 Êñ∞ÂäüËÉΩÔºâ
        if self.current_version >= "1.1.0":
            if FLUENT_AVAILABLE:
                self.minus_button = FluentButton("-1")
            else:
                self.minus_button = QPushButton("-1")
            self.minus_button.clicked.connect(self.decrement_counter)
            button_layout.addWidget(self.minus_button)
        
        button_layout.addWidget(self.plus_button)
        
        # ÂÖ≥‰∫éÊåâÈíÆÔºàv1.1.0 Êñ∞ÂäüËÉΩÔºâ
        if self.current_version >= "1.1.0":
            if FLUENT_AVAILABLE:
                self.about_button = FluentButton("ÂÖ≥‰∫é")
            else:
                self.about_button = QPushButton("ÂÖ≥‰∫é")
            self.about_button.clicked.connect(self.show_about)
            button_layout.addWidget(self.about_button)
        
        function_layout.addWidget(QLabel("üìä Â∫îÁî®ÂäüËÉΩÊºîÁ§∫"))
        function_layout.addWidget(self.counter_label)
        function_layout.addLayout(button_layout)
        
        layout.addWidget(function_frame)
    
    def create_update_section(self, layout):
        """ÂàõÂª∫Êõ¥Êñ∞Âå∫Âüü"""
        update_frame = QFrame()
        update_frame.setFrameStyle(QFrame.Box)
        update_layout = QVBoxLayout(update_frame)
        
        update_layout.addWidget(QLabel("üîÑ Âú®Á∫øÊõ¥Êñ∞"))
        
        # Êõ¥Êñ∞ÊåâÈíÆ
        button_layout = QHBoxLayout()
        
        if FLUENT_AVAILABLE:
            self.check_update_button = FluentPrimaryButton("Ê£ÄÊü•Êõ¥Êñ∞")
        else:
            self.check_update_button = QPushButton("Ê£ÄÊü•Êõ¥Êñ∞")
        self.check_update_button.clicked.connect(self.check_for_updates)
        
        # Êõ¥Êñ∞Áä∂ÊÄÅ
        self.update_status_label = QLabel("ÁÇπÂáªÊ£ÄÊü•Êõ¥Êñ∞")
        self.update_status_label.setStyleSheet("color: #666;")
        
        button_layout.addWidget(self.check_update_button)
        button_layout.addStretch()
        button_layout.addWidget(self.update_status_label)
        
        update_layout.addLayout(button_layout)
        layout.addWidget(update_frame)
    
    def create_log_section(self, layout):
        """ÂàõÂª∫Êó•ÂøóÂå∫Âüü"""
        log_frame = QFrame()
        log_frame.setFrameStyle(QFrame.Box)
        log_layout = QVBoxLayout(log_frame)
        
        log_layout.addWidget(QLabel("üìù Á≥ªÁªüÊó•Âøó"))
        
        # Êó•ÂøóÊòæÁ§∫
        self.log_text = QTextEdit()
        self.log_text.setMaximumHeight(150)
        self.log_text.setReadOnly(True)
        self.log_text.setPlaceholderText("Êó•Âøó‰ø°ÊÅØÂ∞ÜÂú®ËøôÈáåÊòæÁ§∫...")
        
        log_layout.addWidget(self.log_text)
        layout.addWidget(log_frame)
    
    def apply_theme(self):
        """Â∫îÁî®‰∏ªÈ¢òÊ†∑Âºè"""
        # Ê†πÊçÆÁâàÊú¨Â∫îÁî®‰∏çÂêåÁöÑ‰∏ªÈ¢òÈ¢úËâ≤
        if self.current_version >= "1.1.0":
            # v1.1.0: ÁªøËâ≤‰∏ªÈ¢ò
            theme_color = "#4CAF50"
            bg_color = "#f8fff8"
        else:
            # v1.0.0: ËìùËâ≤‰∏ªÈ¢ò
            theme_color = "#2196F3"
            bg_color = "#f8f9ff"
        
        self.setStyleSheet(f"""
            QWidget {{
                background-color: {bg_color};
                font-family: 'Microsoft YaHei', Arial, sans-serif;
            }}
            QFrame {{
                border: 1px solid #ddd;
                border-radius: 8px;
                padding: 10px;
                margin: 5px;
                background-color: white;
            }}
            QPushButton {{
                background-color: {theme_color};
                color: white;
                border: none;
                border-radius: 6px;
                padding: 8px 16px;
                font-weight: bold;
            }}
            QPushButton:hover {{
                background-color: {theme_color}dd;
            }}
            QPushButton:pressed {{
                background-color: {theme_color}aa;
            }}
            QLabel {{
                color: #333;
            }}
            QTextEdit {{
                border: 1px solid #ddd;
                border-radius: 4px;
                padding: 8px;
                background-color: #fafafa;
                font-family: 'Consolas', monospace;
                font-size: 10px;
            }}
        """)
    
    def increment_counter(self):
        """ËÆ°Êï∞Âô®+1"""
        self.counter += 1
        self.counter_label.setText(f"ËÆ°Êï∞Âô®: {self.counter}")
        self.log_message(f"ËÆ°Êï∞Âô®Â¢ûÂä†Âà∞: {self.counter}")
    
    def decrement_counter(self):
        """ËÆ°Êï∞Âô®-1 (v1.1.0Êñ∞ÂäüËÉΩ)"""
        self.counter -= 1
        self.counter_label.setText(f"ËÆ°Êï∞Âô®: {self.counter}")
        self.log_message(f"ËÆ°Êï∞Âô®ÂáèÂ∞ëÂà∞: {self.counter}")
    
    def show_about(self):
        """ÊòæÁ§∫ÂÖ≥‰∫éÂØπËØùÊ°Ü (v1.1.0Êñ∞ÂäüËÉΩ)"""
        QMessageBox.about(
            self,
            "ÂÖ≥‰∫é",
            f"""
            <h3>Âú®Á∫øÊõ¥Êñ∞ÊµãËØïÂ∫îÁî®</h3>
            <p><b>ÁâàÊú¨:</b> v{self.current_version}</p>
            <p><b>ÊèèËø∞:</b> ÊºîÁ§∫Âú®Á∫øÊõ¥Êñ∞ÂäüËÉΩÁöÑÊµãËØïÂ∫îÁî®</p>
            <p><b>ÊäÄÊúØÊ†à:</b> PyQt5 + FastAPI</p>
            <p><b>‰ΩúËÄÖ:</b> Claude AI</p>
            <hr>
            <p><small>ËøôÊòØ‰∏Ä‰∏™Áî®‰∫éÊµãËØïÂú®Á∫øÊõ¥Êñ∞ÂäüËÉΩÁöÑÁ§∫‰æãÂ∫îÁî®Á®ãÂ∫è„ÄÇ</small></p>
            """
        )
    
    def auto_check_update(self):
        """Ëá™Âä®Ê£ÄÊü•Êõ¥Êñ∞"""
        self.log_message("üîç ÂêØÂä®Êó∂Ëá™Âä®Ê£ÄÊü•Êõ¥Êñ∞...")
        self.check_for_updates(silent=True)
    
    def check_for_updates(self, silent=False):
        """Ê£ÄÊü•Êõ¥Êñ∞"""
        if self.update_check_thread and self.update_check_thread.isRunning():
            self.log_message("‚ö†Ô∏è Êõ¥Êñ∞Ê£ÄÊü•Ê≠£Âú®ËøõË°å‰∏≠...")
            return
        
        if not silent:
            self.log_message("üîç ÊâãÂä®Ê£ÄÊü•Êõ¥Êñ∞...")
        
        self.check_update_button.setEnabled(False)
        self.update_status_label.setText("Ê£ÄÊü•‰∏≠...")
        
        # ÂàõÂª∫Ê£ÄÊü•Á∫øÁ®ã
        self.update_check_thread = UpdateCheckThread(self.api_client, self.current_version)
        self.update_check_thread.update_found.connect(self.on_update_found)
        self.update_check_thread.check_completed.connect(self.on_check_completed)
        self.update_check_thread.start()
    
    def on_update_found(self, update_info):
        """ÂèëÁé∞Êõ¥Êñ∞ - PyInstallerÊ®°Âºè"""
        self.log_message(f"‚ö†Ô∏è ÂèëÁé∞Âº∫Âà∂Êõ¥Êñ∞: {update_info['latest_version']}")
        
        # PyInstallerÊ®°ÂºèÔºöÊòæÁ§∫Êõ¥Êñ∞Á°ÆËÆ§ÂØπËØùÊ°Ü
        reply = QMessageBox.question(
            self,
            "ÂèëÁé∞Êñ∞ÁâàÊú¨",
            f"""ÂèëÁé∞Êñ∞ÁâàÊú¨ v{update_info['latest_version']}
            
ÂΩìÂâçÁâàÊú¨: v{self.current_version}
Êñá‰ª∂Â§ßÂ∞è: {self.format_file_size(update_info.get('file_size', 0))}

ÊòØÂê¶Á´ãÂç≥Êõ¥Êñ∞Ôºü
Ê≥®ÊÑèÔºöÊõ¥Êñ∞ËøáÁ®ã‰∏≠Á®ãÂ∫èÂ∞Ü‰ºöÂÖ≥Èó≠Âπ∂ÈáçÂêØ„ÄÇ""",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.Yes
        )
        
        if reply == QMessageBox.Yes:
            self.log_message("üëç Áî®Êà∑Á°ÆËÆ§Êõ¥Êñ∞ÔºåÂêØÂä®Êõ¥Êñ∞Âô®...")
            self.start_pyinstaller_update(update_info)
        else:
            self.log_message("Áî®Êà∑ÈÄâÊã©Á®çÂêéÊõ¥Êñ∞")
    
    def format_file_size(self, size_bytes):
        """Ê†ºÂºèÂåñÊñá‰ª∂Â§ßÂ∞èÊòæÁ§∫"""
        if size_bytes == 0:
            return "Êú™Áü•Â§ßÂ∞è"
        
        for unit in ['B', 'KB', 'MB', 'GB']:
            if size_bytes < 1024.0:
                return f"{size_bytes:.1f} {unit}"
            size_bytes /= 1024.0
        return f"{size_bytes:.1f} TB"
    
    def on_check_completed(self, success, message):
        """Ê£ÄÊü•ÂÆåÊàê"""
        self.check_update_button.setEnabled(True)
        self.update_status_label.setText(message)
        
        if success:
            self.log_message(f"‚úÖ Êõ¥Êñ∞Ê£ÄÊü•ÂÆåÊàê: {message}")
        else:
            self.log_message(f"‚ùå Êõ¥Êñ∞Ê£ÄÊü•Â§±Ë¥•: {message}")
    
    def start_pyinstaller_update(self, update_info):
        """ÂêØÂä®PyInstallerÊ®°ÂºèÁöÑÊõ¥Êñ∞ËøáÁ®ã"""
        try:
            # 1. Á°ÆÂÆöÊõ¥Êñ∞Âô®Ë∑ØÂæÑ
            if getattr(sys, 'frozen', False):
                # Â¶ÇÊûúÊòØÊâìÂåÖÂêéÁöÑexeËøêË°å
                app_dir = Path(sys.executable).parent
                updater_path = app_dir / "updater.exe"
                current_exe = sys.executable
            else:
                # Â¶ÇÊûúÊòØÂºÄÂèëÁéØÂ¢ÉËøêË°å
                app_dir = Path(__file__).parent
                updater_path = app_dir / "updater.exe"
                current_exe = "KuzflowApp.exe"  # ÂÅáËÆæÁöÑexeÂêçÁß∞
            
            # 2. Ê£ÄÊü•Êõ¥Êñ∞Âô®ÊòØÂê¶Â≠òÂú®
            if not updater_path.exists():
                QMessageBox.critical(
                    self, 
                    "Êõ¥Êñ∞Âô®‰∏çÂ≠òÂú®", 
                    f"Êâæ‰∏çÂà∞Êõ¥Êñ∞Âô®Á®ãÂ∫èÔºö{updater_path}\nËØ∑ÈáçÊñ∞‰∏ãËΩΩÂÆåÊï¥ÁöÑÂ∫îÁî®Á®ãÂ∫èÂåÖ„ÄÇ"
                )
                return
            
            # 3. ÂáÜÂ§áÊõ¥Êñ∞‰ø°ÊÅØÊñá‰ª∂
            temp_dir = app_dir / "temp"
            temp_dir.mkdir(exist_ok=True)
            update_info_file = temp_dir / "update_info.json"
            
            # ‰øùÂ≠òÊõ¥Êñ∞‰ø°ÊÅØ
            with open(update_info_file, 'w', encoding='utf-8') as f:
                json.dump(update_info, f, ensure_ascii=False, indent=2)
            
            self.log_message(f"üìù Êõ¥Êñ∞‰ø°ÊÅØÂ∑≤‰øùÂ≠òÂà∞: {update_info_file}")
            
            # 4. ÂêØÂä®Êõ¥Êñ∞Âô®
            self.log_message("üöÄ ÂêØÂä®Êõ¥Êñ∞Âô®Á®ãÂ∫è...")
            
            updater_args = [
                str(updater_path),
                str(update_info_file),
                Path(current_exe).name  # Âè™‰º†ÈÄíÊñá‰ª∂Âêç
            ]
            
            self.log_message(f"Êõ¥Êñ∞Âô®ÂëΩ‰ª§: {' '.join(updater_args)}")
            
            # ÂêØÂä®Êõ¥Êñ∞Âô®ËøõÁ®ã
            subprocess.Popen(updater_args, cwd=str(app_dir))
            
            # 5. ÊòæÁ§∫ÊèêÁ§∫Âπ∂ÂÖ≥Èó≠‰∏ªÁ®ãÂ∫è
            QMessageBox.information(
                self,
                "ÂêØÂä®Êõ¥Êñ∞Âô®",
                "Êõ¥Êñ∞Âô®Â∑≤ÂêØÂä®Ôºå‰∏ªÁ®ãÂ∫èÂç≥Â∞ÜÂÖ≥Èó≠„ÄÇ\nËØ∑Á≠âÂæÖÊõ¥Êñ∞ÂÆåÊàêÔºåÁ®ãÂ∫èÂ∞ÜËá™Âä®ÈáçÂêØ„ÄÇ"
            )
            
            self.log_message("üí§ ‰∏ªÁ®ãÂ∫èÂç≥Â∞ÜÈÄÄÂá∫ÔºåÁ≠âÂæÖÊõ¥Êñ∞Âô®Êé•ÁÆ°...")
            
            # 6. ÂÖ≥Èó≠‰∏ªÁ®ãÂ∫è
            self.close_application()
            
        except Exception as e:
            self.log_message(f"‚ùå ÂêØÂä®Êõ¥Êñ∞Âô®Â§±Ë¥•: {e}")
            QMessageBox.critical(
                self,
                "ÂêØÂä®Êõ¥Êñ∞Âô®Â§±Ë¥•",
                f"Êó†Ê≥ïÂêØÂä®Êõ¥Êñ∞Á®ãÂ∫èÔºö\n{str(e)}\n\nËØ∑Â∞ùËØïÊâãÂä®ÈáçÊñ∞‰∏ãËΩΩÂ∫îÁî®Á®ãÂ∫è„ÄÇ"
            )
    
    def close_application(self):
        """ÂÆâÂÖ®ÂÖ≥Èó≠Â∫îÁî®Á®ãÂ∫è"""
        try:
            # ÂÖ≥Èó≠APIÂÆ¢Êà∑Á´Ø
            if self.api_client:
                self.api_client.close()
            
            # ÂÅúÊ≠¢Êõ¥Êñ∞Ê£ÄÊü•Á∫øÁ®ã
            if self.update_check_thread and self.update_check_thread.isRunning():
                self.update_check_thread.quit()
                self.update_check_thread.wait(2000)  # Á≠âÂæÖÊúÄÂ§ö2Áßí
            
            # ÈÄÄÂá∫Â∫îÁî®
            QApplication.quit()
            
        except Exception as e:
            self.log_message(f"ÂÖ≥Èó≠Â∫îÁî®Êó∂Âá∫Èîô: {e}")
            # Âº∫Âà∂ÈÄÄÂá∫
            sys.exit(0)
    
    def get_application_info(self):
        """Ëé∑ÂèñÂ∫îÁî®‰ø°ÊÅØÔºàÁî®‰∫éË∞ÉËØïÔºâ"""
        info = {
            "is_frozen": getattr(sys, 'frozen', False),
            "executable": sys.executable if getattr(sys, 'frozen', False) else __file__,
            "app_dir": Path(sys.executable).parent if getattr(sys, 'frozen', False) else Path(__file__).parent,
            "current_version": self.current_version
        }
        return info
    
    def log_message(self, message):
        """ËÆ∞ÂΩïÊó•ÂøóÊ∂àÊÅØ"""
        timestamp = time.strftime("%H:%M:%S", time.localtime())
        formatted_message = f"[{timestamp}] {message}"
        
        # Ê∑ªÂä†Âà∞Êó•ÂøóÊòæÁ§∫
        self.log_text.append(formatted_message)
        
        # Ëá™Âä®ÊªöÂä®Âà∞Â∫ïÈÉ®
        cursor = self.log_text.textCursor()
        cursor.movePosition(cursor.End)
        self.log_text.setTextCursor(cursor)
        
        # ÊéßÂà∂Âè∞ËæìÂá∫
        print(formatted_message)
    
    def closeEvent(self, event):
        """Â∫îÁî®ÂÖ≥Èó≠‰∫ã‰ª∂"""
        if self.api_client:
            self.api_client.close()
        
        if self.update_check_thread and self.update_check_thread.isRunning():
            self.update_check_thread.wait()
        
        event.accept()


def main():
    """‰∏ªÂáΩÊï∞"""
    # ÂêØÁî®È´òDPIÁº©Êîæ
    QApplication.setAttribute(Qt.AA_EnableHighDpiScaling, True)
    QApplication.setAttribute(Qt.AA_UseHighDpiPixmaps, True)
    
    # ÂàõÂª∫Â∫îÁî®ÂÆû‰æã
    app = QApplication(sys.argv)
    
    # ËÆæÁΩÆÂ∫îÁî®‰ø°ÊÅØ
    app.setApplicationName("Âú®Á∫øÊõ¥Êñ∞ÊµãËØïÂ∫îÁî®")
    app.setApplicationVersion("1.0.0")
    app.setOrganizationName("TestOrg")
    
    # ÂàõÂª∫Âπ∂ÊòæÁ§∫‰∏ªÁ™óÂè£
    window = SimpleTestApp()
    window.show()
    
    # ÂêØÂä®‰∫ã‰ª∂Âæ™ÁéØ
    sys.exit(app.exec_())


if __name__ == '__main__':
    main()
